package com.huarui.cooperation.project.service.impl;

import cn.hutool.core.collection.CollUtil;
import cn.hutool.core.collection.CollectionUtil;
import cn.hutool.core.util.NumberUtil;
import cn.hutool.core.util.StrUtil;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.core.toolkit.IdWorker;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import com.huarui.api.cooperation.base.enums.CooperationTagEnum;
import com.huarui.api.cooperation.base.enums.ProjectTaskStatusEnum;
import com.huarui.api.cooperation.permission.enums.MenuTypeEnum;
import com.huarui.api.cooperation.permission.enums.RoleTypeEnum;
import com.huarui.api.cooperation.project.enums.ProjectStageEnum;
import com.huarui.api.cooperation.task.enums.TaskAttachTypeEnum;
import com.huarui.api.msg.base.dto.MsgParamDTO;
import com.huarui.api.msg.base.enums.NofityTypeEnum;
import com.huarui.api.msg.base.event.MsgSendEvent;
import com.huarui.api.msg.tag.enums.BaseTagEnum;
import com.huarui.common.core.constant.CacheConstants;
import com.huarui.common.core.constant.GlobalConst;
import com.huarui.common.core.exception.CustomException;
import com.huarui.common.core.reponse.ApiResolver;
import com.huarui.common.core.utils.Conversion;
import com.huarui.common.core.utils.MoneyUtil;
import com.huarui.common.core.utils.ZWStringUtil;
import com.huarui.common.core.web.page.PageResult;
import com.huarui.common.event.publish.EventPublisherExecutor;
import com.huarui.common.redis.service.CacheRoleUtil;
import com.huarui.common.redis.service.CacheUserUtil;
import com.huarui.common.redis.service.CacheUtil;
import com.huarui.common.security.utils.SecurityUtils;
import com.huarui.cooperation.permission.entity.CooperationProjectUserRole;
import com.huarui.cooperation.permission.entity.CooperationRole;
import com.huarui.cooperation.permission.service.ICooperationProjectUserRoleService;
import com.huarui.cooperation.permission.service.ICooperationRoleService;
import com.huarui.cooperation.project.entity.CooperationProject;
import com.huarui.cooperation.project.entity.CooperationProjectOwner;
import com.huarui.cooperation.project.entity.CooperationProjectOwnerRate;
import com.huarui.cooperation.project.entity.CooperationProjectStar;
import com.huarui.cooperation.project.mapper.CooperationProjectMapper;
import com.huarui.cooperation.project.mvo.indto.CooperationProjectINDTO;
import com.huarui.cooperation.project.mvo.indto.CooperationProjectImplementINDTO;
import com.huarui.cooperation.project.mvo.qo.*;
import com.huarui.cooperation.project.mvo.vo.*;
import com.huarui.cooperation.project.service.*;
import com.huarui.cooperation.task.entity.CooperationTask;
import com.huarui.cooperation.task.entity.CooperationTaskAttach;
import com.huarui.cooperation.task.mvo.qo.CooperationTaskCostApprovePageQO;
import com.huarui.cooperation.task.mvo.qo.CooperationTaskCostRemitPageQO;
import com.huarui.cooperation.task.service.*;
import com.huarui.cooperation.utils.ProjectUtil;
import com.huarui.system.api.RemoteUserService;
import com.huarui.system.api.dto.CooperationUserStatisticsVO;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import javax.annotation.Resource;
import java.math.RoundingMode;
import java.time.LocalDateTime;
import java.util.*;
import java.util.stream.Collectors;

/**
 * <p>
 * 协作项目 服务实现类
 * </p>
 *
 * @author Peter
 * @since 2022-02-08
 */
@Service
@Transactional
public class CooperationProjectServiceImpl extends ServiceImpl<CooperationProjectMapper, CooperationProject> implements ICooperationProjectService {

    @Autowired
    ICooperationProjectOwnerService ownerService;
    @Autowired
    ICooperationProjectOwnerRateService ownerRateService;
    @Autowired
    ICooperationTaskService taskService;
    @Autowired
    ICooperationTaskAttachService taskAttachService;
    @Autowired
    ICooperationTaskGroupService taskGroupService;
    @Autowired
    ICooperationProjectApproveHisService approveHisService;
    @Autowired
    ICooperationTaskCostService taskCostService;
    @Autowired
    ICooperationTaskCostRemitService taskCostRemitService;
    @Autowired
    ICooperationProjectStarService projectStarService;
    @Autowired
    ICooperationProjectUserRoleService userRoleService;
    @Autowired
    ICooperationRoleService roleService;
    @Resource
    RemoteUserService userService;

    @Override
    public boolean checkAndSave(CooperationProjectINDTO projectINDTO) {
        if(CacheUserUtil.getUser(SecurityUtils.getUserId()).getUser025()!=1){
            CustomException.throwEx("您无权创建项目");
        }
        Long contractAmount=0L;
        Long budgetAmount=0L;
        if(StrUtil.equals(projectINDTO.getApprovalType(),"contract")){
            if(projectINDTO.getBudgetAmountWan()==null || projectINDTO.getContractAmountWan()==null || projectINDTO.getOwners().stream().filter(t->t.getAmountWan()==null).count()>0){
                CustomException.throwEx("预算总额，合同金额不能为空");
            }
            for(CooperationProjectINDTO.Owner owner:projectINDTO.getOwners()){
                if(!owner.getPayTime().equals(owner.getOwnerRates().size())){
                    CustomException.throwEx("甲方付款次数与填写的次数不匹配");
                }
                Integer totalRate=owner.getOwnerRates().stream().collect(Collectors.summingInt(t->t));
                if(!totalRate.equals(100)){
                    CustomException.throwEx("甲方填写的付款比例相加应等于100");
                }
            }
            contractAmount=MoneyUtil.wanToFen(projectINDTO.getContractAmountWan());
            budgetAmount=MoneyUtil.wanToFen(projectINDTO.getBudgetAmountWan());
            if(budgetAmount.compareTo(contractAmount)>0){
                CustomException.throwEx("预算金额不能超过合同金额");
            }
        }
        CooperationProject project=null;
        Set<CooperationProjectUserRole> userRoles=CollectionUtil.newHashSet();
        if(StrUtil.isNotBlank(projectINDTO.getId())){
            userRoleService.checkPermit(projectINDTO.getId());
            project=checkAndGet(projectINDTO.getId());
            Conversion.copyProperties(projectINDTO,project);
            super.lambdaUpdate().set(CooperationProject::getProjectName,projectINDTO.getProjectName()).set(CooperationProject::getStartTime,projectINDTO.getStartTime())
                    .set(CooperationProject::getEndTime,projectINDTO.getEndTime())
                    .set(CooperationProject::getProjectType,projectINDTO.getProjectType())
                    .set(CooperationProject::getApprovalType,projectINDTO.getApprovalType())
                    .set(projectINDTO.getBudgetAmountWan()!=null,CooperationProject::getBudgetAmount,budgetAmount)
                    .set(projectINDTO.getContractAmountWan()!=null,CooperationProject::getContractAmount,contractAmount)
                    .set(CooperationProject::getRemarks,projectINDTO.getRemarks()).eq(CooperationProject::getId,projectINDTO.getId()).update();
        } else {
            project=Conversion.changeOne(projectINDTO,CooperationProject.class);
            project.setContractAmount(contractAmount);
            project.setBudgetAmount(budgetAmount);
            super.save(project);
            taskGroupService.createDefaultGroup(project.getId());
            CooperationRole role=roleService.lambdaQuery().eq(CooperationRole::getRoleCode, RoleTypeEnum.PROJECT_ADMIN.name()).one();
            userRoles.addAll(make(project.getId(),role.getId(),SecurityUtils.getUserId()));
        }
        //甲方信息
        CooperationProject finalProject = project;
        Set<CooperationProjectOwner> owners=new HashSet<>();
        Set<CooperationProjectOwnerRate> ownerRates=new HashSet<>();
        for(int i=0;i<projectINDTO.getOwners().size();i++){
            CooperationProjectINDTO.Owner t=projectINDTO.getOwners().get(i);
            CooperationProjectOwner owner=Conversion.changeOne(t,CooperationProjectOwner.class).setProjectId(finalProject.getId()).setAmount(MoneyUtil.wanToFen(t.getAmountWan()));
            owner.setId(IdWorker.getIdStr());
            owners.add(owner);
            int finalI = i;
            ownerRates.addAll(t.getOwnerRates().stream().map(e->{
                return new CooperationProjectOwnerRate().setProjectId(finalProject.getId()).setProjectOwnerId(t.getOwnerId()).setRate(e).setSortNo(finalI +1);
            }).collect(Collectors.toSet()));
        }
        ownerService.lambdaUpdate().eq(CooperationProjectOwner::getProjectId,project.getId()).remove();
        if(CollUtil.isNotEmpty(owners)) {
            ownerService.saveBatch(owners);
        }
        ownerRateService.lambdaUpdate().eq(CooperationProjectOwnerRate::getProjectId,project.getId()).remove();
        if(CollUtil.isNotEmpty(ownerRates)) {
            ownerRateService.saveBatch(ownerRates);
        }
        //人员信息
        Map<String,CooperationRole> roleMap=roleService.lambdaQuery().in(CooperationRole::getRoleCode, RoleTypeEnum.PROJECT_MANAGER.name(),RoleTypeEnum.PROJECT_CONTROL.name(),RoleTypeEnum.PROJECT_SUPERVISOR.name(),RoleTypeEnum.PROJECT_FINANCE.name(),RoleTypeEnum.PROJECT_MARKETING.name(),RoleTypeEnum.PROJECT_NORMAL_USER.name()).list()
                .stream().collect(Collectors.toMap(t->t.getRoleCode(),t->t));
        CooperationProjectUserRole userRole=userRoleService.lambdaQuery().eq(CooperationProjectUserRole::getProjectId,project.getId()).eq(CooperationProjectUserRole::getRoleId,roleMap.get(RoleTypeEnum.PROJECT_MANAGER.name()).getId()).one();
        String managerId=null;
        if(StrUtil.isNotBlank(projectINDTO.getManagerId())) {
            if (userRole == null || !StrUtil.equals(userRole.getUserId(), projectINDTO.getManagerId())) {
                managerId = projectINDTO.getManagerId();
            }
        }
        Set<String> roleIds=roleMap.values().stream().map(t->t.getId()).collect(Collectors.toSet());
        userRoleService.lambdaUpdate().eq(CooperationProjectUserRole::getProjectId,project.getId()).in(CooperationProjectUserRole::getRoleId,roleIds).remove();
        //保存用户角色信息
        userRoles.addAll(make(project.getId(),roleMap.get(RoleTypeEnum.PROJECT_MANAGER.name()).getId(),projectINDTO.getManagerId()));
        userRoles.addAll(make(project.getId(),roleMap.get(RoleTypeEnum.PROJECT_CONTROL.name()).getId(),projectINDTO.getControlId()));
        userRoles.addAll(make(project.getId(),roleMap.get(RoleTypeEnum.PROJECT_FINANCE.name()).getId(),projectINDTO.getFinanceId()));
        userRoles.addAll(make(project.getId(),roleMap.get(RoleTypeEnum.PROJECT_MARKETING.name()).getId(),projectINDTO.getMarketingId()));
        userRoles.addAll(make(project.getId(),roleMap.get(RoleTypeEnum.PROJECT_SUPERVISOR.name()).getId(),projectINDTO.getSupervisorIds().toArray(new String[projectINDTO.getSupervisorIds().size()])));
        userRoles.addAll(make(project.getId(),roleMap.get(RoleTypeEnum.PROJECT_NORMAL_USER.name()).getId(),projectINDTO.getNormalUserIds().toArray(new String[projectINDTO.getNormalUserIds().size()])));
        userRoles.remove(null);
        userRoleService.saveBatch(userRoles);
        //清除这些人的权限缓存
        CacheUtil.del(CacheConstants.SYS_USER_ROLE_SESSION_FOR_USER_ID, userRoles.stream().map(t->t.getUserId()).collect(Collectors.toSet()));
        if (ZWStringUtil.isNotBlank(managerId)) {
            MsgParamDTO<Map<String,String>> msgParamDTO=new MsgParamDTO();
            msgParamDTO.setNotifyTypes(CollUtil.newHashSet(NofityTypeEnum.INMAIL));
            msgParamDTO.setBusiTypeTags(CollUtil.newHashSet(CooperationTagEnum.COOPERATION, BaseTagEnum.FRONT, CooperationTagEnum.PROJECT, CooperationTagEnum.ASSIGN, CooperationTagEnum.PROJECT_MANAGER));
            msgParamDTO.setUserIds(CollUtil.newHashSet(managerId));
            msgParamDTO.setBusiId(project.getId());
            msgParamDTO.setBusiCreateUserId(SecurityUtils.getUserId());
            msgParamDTO.setTitle("指定您为项目经理");
            msgParamDTO.setName(project.getProjectName());
            /*Map<String,String> data = new HashMap<>();
            data.put("createUsername", SecurityUtils.getUsername());
            data.put("projectName", projectINDTO.getProjectName());
            msgParamDTO.setData(data);*/
            Map<String,String> redirectParams = new HashMap<>();
            redirectParams.put("id", project.getId());
            msgParamDTO.setRedirectParams(redirectParams);
            EventPublisherExecutor.publish(new MsgSendEvent(msgParamDTO));
        }
        return true;
    }

    private Set<CooperationProjectUserRole> make(String projectId,String roleId,String... userIds){
        return userIds==null?null:Arrays.stream(userIds).filter(t->StrUtil.isNotBlank(t)).map(t->{
            return new CooperationProjectUserRole().setUserId(t).setRoleId(roleId).setProjectId(projectId);
        }).collect(Collectors.toSet());
    }

    @Override
    public Set<String> getUserIds(String projectId,String roleCode){
        CooperationRole role = roleService.lambdaQuery().eq(CooperationRole::getRoleCode,roleCode).one();
        return userRoleService.lambdaQuery().eq(CooperationProjectUserRole::getRoleId,role.getId()).eq(CooperationProjectUserRole::getProjectId,projectId)
                .list().stream().map(t->t.getUserId()).collect(Collectors.toSet());
    }

    @Override
    public PageResult<CooperationProjectPageVO> listPage(CooperationProjectPageQO pageQO) {
        IPage<CooperationProjectPageVO> page=new Page<>(pageQO.getPageNum(),pageQO.getPageSize());
        page=baseMapper.listPage(page,pageQO, SecurityUtils.getUserId());
        page.getRecords().forEach(t->{
            Set<String> roleIds=CacheUserUtil.getRoleIds(SecurityUtils.getUserId(),t.getId());
            Set<String> menuUrls=roleIds.stream().map(e->CacheRoleUtil.getMenus(e)).flatMap(e->e.stream()).map(e->e.getMenuUrl()).collect(Collectors.toSet());
            t.setCanUpdate(menuUrls.contains(MenuTypeEnum.PROJECT_UPDATE.getCode()));
            t.setCanDel(menuUrls.contains(MenuTypeEnum.PROJECT_DEL.getCode()));
            t.setCanArchive(menuUrls.contains(MenuTypeEnum.PROJECT_ARCHIVE.getCode()));
            t.setCanRecover(menuUrls.contains(MenuTypeEnum.PROJECT_RECOVER.getCode()));
            t.setCanChange(menuUrls.contains(MenuTypeEnum.PROJECT_CHANGE.getCode()));
            t.setCanImplement(menuUrls.contains(MenuTypeEnum.PROJECT_IMPLEMENT.getCode()));
            t.setCanSuspend(menuUrls.contains(MenuTypeEnum.PROJECT_SUSPEND.getCode()));
            t.setCanPost(menuUrls.contains(MenuTypeEnum.PROJECT_POST.getCode()));
            t.setCanView(menuUrls.contains(MenuTypeEnum.PROJECT_VIEW.getCode()));
            t.setCanSupervision(menuUrls.contains(MenuTypeEnum.PROJECT_SUPERVISION.getCode()));
            t.setCanImplementView(menuUrls.contains(MenuTypeEnum.PROJECT_IMPLEMENT_VIEW.getCode()));
            if(t.getTotal()>0){
                Double rate= NumberUtil.div(t.getFinish().intValue()*100, t.getTotal().intValue(),0, RoundingMode.HALF_UP);
                t.setComplateRate(rate>100?100:rate);
            }else {
                t.setComplateRate(0D);
            }
            t.setBudgetAmountWan(MoneyUtil.fenToWan(t.getBudgetAmount()));
            t.setContractAmountWan(MoneyUtil.fenToWan(t.getContractAmount()));
            if(t.getStatus().equals(ProjectTaskStatusEnum.STATUS_1.getCode()) && Objects.nonNull(t.getEndTime()) && LocalDateTime.now().compareTo(t.getEndTime())>0){
                t.setDeferred(GlobalConst.YES);
            }else if(t.getStatus().equals(ProjectTaskStatusEnum.STATUS_2.getCode()) && Objects.nonNull(t.getEndTime()) && Objects.nonNull(t.getFinishTime()) && t.getFinishTime().compareTo(t.getEndTime())>0){
                t.setDeferred(GlobalConst.YES);
            }else {
                t.setDeferred(GlobalConst.NO);
            }
        });
        return new PageResult<>(page);
    }

    @Override
    public CooperationProjectDetailsVO getDetails(String id) {
        /*userRoleService.checkPermit(id);*/
        CooperationProjectDetailsVO projectDetailsVO=baseMapper.getDetails(id);
        if(projectDetailsVO.getTotal()>0){
            Double rate= NumberUtil.div(projectDetailsVO.getFinish().intValue()*100, projectDetailsVO.getTotal().intValue(),0, RoundingMode.HALF_UP);
            projectDetailsVO.setComplateRate(rate>100?100:rate);
        }
        projectDetailsVO.setBudgetAmountWan(MoneyUtil.fenToWan(projectDetailsVO.getBudgetAmount()));
        projectDetailsVO.setContractAmountWan(MoneyUtil.fenToWan(projectDetailsVO.getContractAmount()));
        List<CooperationProjectDetailsVO.Owner> owners=baseMapper.listOwners(id);
        owners.forEach(t->t.setAmountWan(MoneyUtil.fenToWan(t.getAmount())));
        projectDetailsVO.setOwners(owners);
        Map<String,String> roleMap=roleService.lambdaQuery().in(CooperationRole::getRoleCode,RoleTypeEnum.PROJECT_MARKETING.name(),RoleTypeEnum.PROJECT_SUPERVISOR.name(),RoleTypeEnum.PROJECT_NORMAL_USER.name()).list()
                .stream().collect(Collectors.toMap(t->t.getRoleCode(),t->t.getId()));
        Map<String,List<CooperationProjectUserRole>> projectUserRoleMap=userRoleService.lambdaQuery().in(CooperationProjectUserRole::getRoleId,roleMap.values()).eq(CooperationProjectUserRole::getProjectId,id).list().stream().collect(Collectors.groupingBy(t->t.getRoleId()));
        Optional.ofNullable(projectUserRoleMap.get(roleMap.get(RoleTypeEnum.PROJECT_SUPERVISOR.name()))).map(e->e.stream().map(t->t.getUserId()).collect(Collectors.toList())).ifPresent(e->{
            projectDetailsVO.setSupervisors(ApiResolver.getList(userService.findUsersByIdList(e)).stream().map(t->new CooperationProjectDetailsVO.UserDetailsVO().setUserId(t.getUser001()).setUserName(t.getUser003())).collect(Collectors.toList()));
        });
        Optional.ofNullable(projectUserRoleMap.get(roleMap.get(RoleTypeEnum.PROJECT_MARKETING.name()))).map(e->e.stream().map(t->t.getUserId()).collect(Collectors.toList())).ifPresent(e->{
            CooperationProjectDetailsVO.UserDetailsVO userDetailsVO=ApiResolver.getList(userService.findUsersByIdList(projectUserRoleMap.get(roleMap.get(RoleTypeEnum.PROJECT_MARKETING.name())).stream().map(t->t.getUserId()).collect(Collectors.toList()))).stream().map(t->new CooperationProjectDetailsVO.UserDetailsVO().setUserId(t.getUser001()).setUserName(t.getUser003())).findFirst().orElse(null);
            projectDetailsVO.setMarketingId(userDetailsVO.getUserId());
            projectDetailsVO.setMarketingName(userDetailsVO.getUserName());
        });
        Optional.ofNullable(projectUserRoleMap.get(roleMap.get(RoleTypeEnum.PROJECT_NORMAL_USER.name()))).map(e->e.stream().map(t->t.getUserId()).collect(Collectors.toList())).ifPresent(e->{
            projectDetailsVO.setUsers(ApiResolver.getList(userService.findUsersByIdList(projectUserRoleMap.get(roleMap.get(RoleTypeEnum.PROJECT_NORMAL_USER.name())).stream().map(t->t.getUserId()).collect(Collectors.toList()))).stream().map(t->new CooperationProjectDetailsVO.UserDetailsVO().setUserId(t.getUser001()).setUserName(t.getUser003())).collect(Collectors.toList()));
        });
        return projectDetailsVO;
    }

    @Override
    public boolean makeStar(String id, Integer star) {
        userRoleService.checkPermit(id);
        int i=projectStarService.lambdaQuery().eq(CooperationProjectStar::getProjectId,id).eq(CooperationProjectStar::getUserId,SecurityUtils.getUserId()).count();
        if(new Integer(0).equals(star) && i>0){
            projectStarService.lambdaUpdate().eq(CooperationProjectStar::getProjectId,id).eq(CooperationProjectStar::getUserId,SecurityUtils.getUserId()).remove();
        } else if(new Integer(1).equals(star) && i<1){
            CooperationProjectStar projectStar=new CooperationProjectStar();
            projectStar.setProjectId(id);
            projectStar.setUserId(SecurityUtils.getUserId());
            projectStarService.save(projectStar);
        }
        return true;
    }

    @Override
    public boolean del(String id) {
        userRoleService.checkPermit(id);
        checkAndGet(id);
        return super.lambdaUpdate().set(CooperationProject::getDeleteFlag, GlobalConst.YES).set(CooperationProject::getDeleteTime, LocalDateTime.now())
                .set(CooperationProject::getDeleteUserId,SecurityUtils.getUserId()).eq(CooperationProject::getId,id).update();
    }

    @Override
    public boolean recover(String id) {
        userRoleService.checkPermit(id);
        checkAndGet(id);
        return super.lambdaUpdate().set(CooperationProject::getDeleteFlag, GlobalConst.NO).set(CooperationProject::getDeleteTime, null)
                .set(CooperationProject::getDeleteUserId,null).eq(CooperationProject::getId,id).update();
    }

    @Override
    public List<String> listRoles(String userId) {
        return userRoleService.lambdaQuery().eq(CooperationProjectUserRole::getUserId,userId).eq(CooperationProjectUserRole::getProjectId,ProjectUtil.getProjectId())
                .list().stream().map(t->t.getRoleId()).collect(Collectors.toList());
    }

    @Override
    public boolean setRoles(String userId, List<String> roleIds) {
        Set<String> roleIdSet=roleService.lambdaQuery().in(CooperationRole::getRoleCode, RoleTypeEnum.PROJECT_MANAGER.name(),RoleTypeEnum.PROJECT_CONTROL.name(),RoleTypeEnum.PROJECT_FINANCE.name(),RoleTypeEnum.PROJECT_MARKETING.name()).list()
                .stream().map(t->t.getId()).filter(t->roleIds.contains(t)).collect(Collectors.toSet());
        if (CollectionUtil.isNotEmpty(roleIdSet)) {
            userRoleService.lambdaUpdate().in(CooperationProjectUserRole::getRoleId,roleIdSet).eq(CooperationProjectUserRole::getProjectId,ProjectUtil.getProjectId()).remove();
        }
        userRoleService.lambdaUpdate().eq(CooperationProjectUserRole::getUserId,userId).eq(CooperationProjectUserRole::getProjectId,ProjectUtil.getProjectId()).remove();
        List<CooperationProjectUserRole> userRoles=roleIds.stream().map(t->{
            CooperationProjectUserRole userRole=new CooperationProjectUserRole();
            userRole.setProjectId(ProjectUtil.getProjectId());
            userRole.setUserId(userId);
            userRole.setRoleId(t);
            return userRole;
        }).collect(Collectors.toList());
        userRoleService.saveBatch(userRoles);
        return CacheUtil.del(CacheConstants.SYS_USER_ROLE_SESSION_FOR_USER_ID, userId);
    }

    @Override
    public CooperationUserStatisticsVO statisticsUser() {
        List<String> userIds=userRoleService.lambdaQuery().eq(CooperationProjectUserRole::getProjectId,ProjectUtil.getProjectId()).list()
                .stream().map(t->t.getUserId()).collect(Collectors.toList());
        CooperationUserStatisticsVO statisticsVO=ApiResolver.getData(userService.statisticsUser(userIds));
        int j=taskAttachService.lambdaQuery().eq(CooperationTaskAttach::getProjectId,ProjectUtil.getProjectId())
                .eq(CooperationTaskAttach::getAttachType, TaskAttachTypeEnum.ATTACH_TYPE_1.getCode()).count();
        statisticsVO.setProcessFiles(j);
        int i=taskAttachService.lambdaQuery().eq(CooperationTaskAttach::getProjectId,ProjectUtil.getProjectId())
                .eq(CooperationTaskAttach::getAttachType, TaskAttachTypeEnum.ATTACH_TYPE_2.getCode()).count();
        statisticsVO.setAchievement(i);
        return statisticsVO;
    }

    @Override
    public boolean saveNormalUsers(List<String> userIds) {
        String projectId=ProjectUtil.getProjectId();
        String roleId=roleService.lambdaQuery().eq(CooperationRole::getRoleCode, RoleTypeEnum.PROJECT_NORMAL_USER.name()).one().getId();
        Set<CooperationProjectUserRole> userRoles=userIds.stream().map(t->{
            return new CooperationProjectUserRole().setUserId(t).setRoleId(roleId).setProjectId(projectId);
        }).collect(Collectors.toSet());
        userRoleService.saveBatch(userRoles);
        return CacheUtil.del(CacheConstants.SYS_USER_ROLE_SESSION_FOR_USER_ID, userIds);
    }

    @Override
    public boolean checkMember(String userId) {
        return taskService.lambdaQuery().eq(CooperationTask::getManagerId,userId).eq(CooperationTask::getProjectId,ProjectUtil.getProjectId()).count()>0;
    }

    @Override
    public PageResult<FrontProjectPageVO> listFrontPage(FrontProjectPageQO pageQO) {
        IPage<FrontProjectPageVO> page=new Page<>(pageQO.getPageNum(),pageQO.getPageSize());
        page=baseMapper.listFrontPage(page,pageQO);
        return new PageResult<>(page);
    }

    @Override
    public FrontProjectDetailsVO frontDetails(String id) {
        return baseMapper.frontDetails(id);
    }

    @Override
    public PageResult<CooperationProjectPageVO> listAllPage(AllProjectPageQO pageQO) {
        if(!checkHaveAuthority()){
            return new PageResult<>();
        }
        IPage<CooperationProjectPageVO> page=new Page<>(pageQO.getPageNum(),pageQO.getPageSize());
        page=baseMapper.listAllPage(page,pageQO);
        page.getRecords().forEach(t->{
            Set<String> menuUrls=new HashSet<>();
            Set<String> roleIds=CacheUserUtil.getRoleIds(SecurityUtils.getUserId(),t.getId());
            if(CollUtil.isNotEmpty(roleIds)) {
                menuUrls = roleIds.stream().map(e -> CacheRoleUtil.getMenus(e)).flatMap(e -> e.stream()).map(e -> e.getMenuUrl()).collect(Collectors.toSet());
            }
            t.setCanView(CollectionUtil.isNotEmpty(menuUrls) && menuUrls.contains(MenuTypeEnum.PROJECT_VIEW.getCode()));
            t.setCanImplementView(CollectionUtil.isNotEmpty(menuUrls) && menuUrls.contains(MenuTypeEnum.PROJECT_IMPLEMENT_VIEW.getCode()));
            if(t.getTotal()>0){
                Double rate= NumberUtil.div(t.getFinish().intValue()*100, t.getTotal().intValue(),0, RoundingMode.HALF_UP);
                t.setComplateRate(rate>100?100:rate);
            }
            t.setBudgetAmountWan(MoneyUtil.fenToWan(t.getBudgetAmount()));
            t.setContractAmountWan(MoneyUtil.fenToWan(t.getContractAmount()));
            if(t.getStatus().equals(ProjectTaskStatusEnum.STATUS_1.getCode()) && Objects.nonNull(t.getEndTime()) && LocalDateTime.now().compareTo(t.getEndTime())>0){
                t.setDeferred(GlobalConst.YES);
            }else if(t.getStatus().equals(ProjectTaskStatusEnum.STATUS_2.getCode()) && Objects.nonNull(t.getEndTime()) && Objects.nonNull(t.getFinishTime()) && t.getFinishTime().compareTo(t.getEndTime())>0){
                t.setDeferred(GlobalConst.YES);
            }else {
                t.setDeferred(GlobalConst.NO);
            }
        });
        return new PageResult<>(page);
    }

    @Override
    public String checkUser() {
        return null;
    }

    @Override
    public boolean checkHaveAuthority() {
        return baseMapper.checkHaveAuthority(SecurityUtils.getUserId(),"1540156316804780033")>0;
    }

    @Override
    public boolean implement(CooperationProjectImplementINDTO implementINDTO) {
        CooperationProject project=Conversion.changeOne(implementINDTO,CooperationProject.class);
        project.setStage(ProjectStageEnum.STAGE_1.getCode());
        project.setStatus(ProjectTaskStatusEnum.STATUS_1.getCode());
        return super.updateById(project);
    }

    @Override
    public PageResult<ChooseProjectPageVO> listChoosePage(ChooseProjectPageQO pageQO) {
        IPage<ChooseProjectPageVO> page=new Page<>(pageQO.getPageNum(),pageQO.getPageSize());
        page=baseMapper.listChoosePage(page,pageQO);
        return new PageResult<>(page);
    }

    @Override
    public StatisticsVO statistics() {
        Map<Integer, Integer> myProjectVOS=baseMapper.statistics(SecurityUtils.getUserId()).stream().collect(Collectors.toMap(t->t.getStatus(), t->t.getCountSize()));
        StatisticsVO statisticsVO=new StatisticsVO();
        statisticsVO.setDoingCount(Optional.ofNullable(myProjectVOS.get(1)).orElse(0));
        statisticsVO.setEndCount(Optional.ofNullable(myProjectVOS.get(3)).orElse(0));
        statisticsVO.setFinishCount(Optional.ofNullable(myProjectVOS.get(2)).orElse(0));
        statisticsVO.setProjectCount(approveHisService.listPage(new CooperationProjectApprovePageQO().setType(1)).getTotal());
        statisticsVO.setCostCount(taskCostService.listApprovePage(new CooperationTaskCostApprovePageQO().setType(1)).getTotal());
        statisticsVO.setReviewCount(baseMapper.countWaitReview(SecurityUtils.getUserId()));
        statisticsVO.setRemitCount(taskCostRemitService.listPage(new CooperationTaskCostRemitPageQO().setHasSubmitted(false)).getTotal());
        return statisticsVO;
    }

    @Override
    public List<WaitReviewListVO> waitReviews() {
        return baseMapper.waitReviews(SecurityUtils.getUserId());
    }

    @Override
    public CooperationProjectStatisticsVO backStatistics(String year) {
        Map<Integer, Integer> myProjectVOS=baseMapper.backStatistics(year).stream().collect(Collectors.toMap(t->t.getStatus(), t->t.getCountSize()));
        CooperationProjectStatisticsVO statisticsVO=new CooperationProjectStatisticsVO();
        statisticsVO.setDoingCount(Optional.ofNullable(myProjectVOS.get(1)).orElse(0));
        statisticsVO.setEndCount(Optional.ofNullable(myProjectVOS.get(3)).orElse(0));
        statisticsVO.setFinishCount(Optional.ofNullable(myProjectVOS.get(2)).orElse(0));
        return statisticsVO;
    }

    @Override
    public boolean updateStatus(CooperationProjectImplementINDTO implementINDTO) {
        CooperationProject project=Conversion.changeOne(implementINDTO,CooperationProject.class);
        return super.updateById(project);
    }

    @Override
    public boolean changeStatus(String id, Integer status) {
        userRoleService.checkPermit(id);
        CooperationProject project=super.getById(id);
        if(project==null){
            CustomException.throwEx("数据不存在");
        }
        project.setStatus(status);
        if(status.equals(ProjectTaskStatusEnum.STATUS_2.getCode())){
            project.setFinishTime(LocalDateTime.now());
        }
        return super.updateById(project);
    }

    @Override
    public PageResult<MemberPageVO> listMemberPage(MemberPageQO pageQO) {
        if(StrUtil.isBlank(pageQO.getProjectId())){
            pageQO.setProjectId(ProjectUtil.onlyGetProjectId());
        }
        if(StrUtil.isBlank(pageQO.getProjectId())){
            return new PageResult<>();
        }
        IPage<MemberPageVO> page=new Page<>(pageQO.getPageNum(),pageQO.getPageSize());
        page=baseMapper.listMemberPage(page,pageQO);
        return new PageResult<>(page);
    }

    @Override
    public boolean delMember(String userId) {
        taskService.lambdaUpdate().set(CooperationTask::getManagerId,null).eq(CooperationTask::getManagerId,userId).update();
        userRoleService.lambdaUpdate().eq(CooperationProjectUserRole::getProjectId,ProjectUtil.getProjectId()).eq(CooperationProjectUserRole::getUserId,userId).remove();
        return CacheUtil.del(CacheConstants.SYS_USER_ROLE_SESSION_FOR_USER_ID, userId);
    }

    private CooperationProject checkAndGet(String id){
        CooperationProject project=super.getById(id);
        if(project==null){
            CustomException.throwEx("数据不存在");
        }
        if(project.getStatus().equals(3)){
            CustomException.throwEx("归档项目不可变更");
        }
        return project;
    }

    /**
     * @Author Peter
     * @Description todo 定时扫码项目，并超时预警
     * @Date 2022-02-14 18:49
     * @return void
     **/
    public void checkAndWarn(){
        List<CooperationProject> projects=super.lambdaQuery().eq(CooperationProject::getDeleteFlag,GlobalConst.NO)
                .in(CooperationProject::getStatus,ProjectTaskStatusEnum.STATUS_0.getCode(),ProjectTaskStatusEnum.STATUS_1.getCode())
                .le(CooperationProject::getEndTime,LocalDateTime.now().plusDays(3)).list();
    }

}
